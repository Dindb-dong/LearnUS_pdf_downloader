services:
  web:
    build: .
    env_file:
      - .env  # ✅ .env 파일 로드
    working_dir: /app
    ports:
      - "5000:5000"
    healthcheck:  # ✅ 추가된 부분
      test: ["CMD", "curl", "-f", "http://127.0.0.1:5000"]
      interval: 10s
      retries: 3
      start_period: 5s
      timeout: 5s
    depends_on:
      redis:
        condition: service_started
    environment:
      - FLASK_RUN_HOST=0.0.0.0
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    volumes:
      - .:/app
    restart: always
    command: sh -c "PYTHONPATH=. gunicorn -b 0.0.0.0:5000 -w 4 wsgi:app"

  worker:  # ✅ Celery Worker 서비스 추가
    build: .
    network_mode: "host" # 컨테이너 내부에서 127.0.0.1:9223로 접근 가능
    env_file:
      - .env  # ✅ .env 파일 로드
    command: celery -A tasks worker --loglevel=info --concurrency=4  # ✅ Worker 4개 실행
    depends_on:
      web:
        condition: service_healthy  # ✅ web 서비스가 준비된 후 시작
      redis:
        condition: service_started
    environment:
      - CELERY_BROKER_URL=redis://127.0.0.1:6379/0
      - CELERY_RESULT_BACKEND=redis://127.0.0.1:6379/0
    volumes:
      - .:/app
    restart: always

  redis:
    image: redis:latest
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: always

volumes:
  redis_data: